JVM调优

无监控不调优

1.Java内存结构《深入Java虚拟机》

+ 虚拟机栈VM Stack
  - 每个线程都拥有自己的栈空间
  - 每个方法一个栈帧
    * 局部变量表
    * 操作数栈
    * 动态连接
    * 返回地址
+ 堆内存Heap：存放new出来的对象
+ 本地方法栈Native Method Stack
+ 方法区Method Area（永久区Perm）：运行时常量池
+ 程序计数器Program Counter Register
+ 本地库接口
+ 执行引擎

2.堆内存的构成（new的对象）

新生代new：eden survivor(from/s0) survivor(to/s1)
老年代old：tenured

+ 当对象初始化new出来的时候：
  - 大对象直接放入tenured
  - 其他普通对象放入eden
+ 经过多次GC后仍有引用指向的对象将会在两个survivor区之间交替复制
+ 每个时刻总有一个survivor区为空
+ 经过很多次GC后仍不能被回收的对象将被移入tenured区

3.垃圾收集算法

GC如何确定垃圾
+ 什么是垃圾？
  String s = new String("hello"); s = null;
  - 没有引用指向的对象
  - 互相引用但与外界隔绝的多个对象（有向图的孤岛结点）
  - 软引用/弱引用/虚引用
+ 如何确定垃圾？
  - 若采用引用计数算法，会有循环引用的问题
  - 应采用正向可达算法，从GC roots对象计算不可达的对象即是垃圾
  - 哪些对象可以认为是GC roots对象：main方法里创建的对象/Classloader/...

垃圾收集算法
+ Mark-Sweep标记清除
  - 先在可回收的内存上打上标记，然后将标记过的内存块回收
  - 缺点：易造成内存不连续和碎片化
  - 创建大对象如果获取不到连续的内存空间就会触发fullGC（内存数据的拷贝压缩）
+ Copying复制（主要用于新生代的两个survivor区）
  - 将内存空间分成两个区域A、B
  - 将A区域非垃圾数据拷贝并压缩到B区域，然后回收整个A区域
  - 之后新数据存入B区域，重复以上步骤，如此交替
  - 缺点：内存浪费，可用内存区域只有一半
  - 各内存区分配比例（经验值）：eden:survivor:survivor = 8:1:1
  - 新生代和老年代分配比例（经验值）：new:old = 1:3/3:8/1:2
+ Mark-Compact标记压缩（主要用于老年代内存区）
  - 先在可回收的内存上打上标记，然后将存活对象压缩至内存的一端
  - 缺点：效率比Copy低
+ JVM采用分代算法
  - new新生代：存活对象少，使用Copying，占用的内存空间也不大，效率也高
  - old老年代：垃圾少，一般使用Mark-Compact标记压缩算法
+ JVM参数
  * - 标准参数，所有JVM都应该支持
  * -X 非标准参数，每个JVM的实现都不同
  * -XX 不稳定参数，下一个版本可能会取消
  * 常见JVM：HotSpot/JRockit/IBM J9/Zing VM

4.垃圾收集器选择

参考：Hotspot Virtual Machine Garbage Collection Tuning Guide

- Serial Collector（数据量较小或单个处理器的场景）
  使用单线程进行垃圾收集，不能很好的利用多处理器资源
  -XX:+UseSerialGC
- Parallel Collector（性能优先且可容忍有1s以上停顿时间的场景）
  并发量大，但每次垃圾收集时JVM需要停顿
  -XX:+UseParallelGC
- CMS Collector（响应时间优先且要求停顿时间小于1s的场景）
  内存分块，并发进行标记清除，停顿时间短
  -XX:+UseConcMarkSweepGC
- G1 Collector（响应时间优先且要求停顿时间小于1s的场景）
  不仅停顿时间短，且并发量大
  -XX:+UseG1GC

5.堆内存参数调整

Java对象的分配
+ 栈上分配
  - 线程私有小对象
  - 无逃逸
  - 支持标量替换
  * [无需调整]
+ 线程本地分配TLAB（Thread Local Allocation Buffer），联系volatile关键字
  - 占用eden，默认1%
  - 多线程的时候不用竞争eden就可以申请空间，提高效率
  - 小对象
  * [无需调整]
+ 老年代：大对象
+ eden区

用VisualVM观察虚拟机堆信息：
File->Load->选择jvm.dump->Classes->查看占用内存最多的ClassName
其他可以使用的工具：JProfiler/jhat/jmap/JConsole

常用参数设置
+ 堆设置
  * -Xms 初始堆大小
  * -Xmx 最大堆大小
  * -Xss 线程栈大小
  * -XX:NewSize=n 设置年轻代大小
  * -XX:NewRatio=n 设置年轻代和年老代的比值。如3，表示年轻代:年老代=1:3，年轻代占整个年轻代年老代和的1/4
  * -XX:SurvivorRatio=n 年轻代中eden区与两个survivor区的比值。注意survivor区有两个。如3，表示eden:survivor=3:2，一个survivor区占整个年轻代的1/5
  * -XX:MaxPermSize=n 设置持久代大小
+ 收集器设置
  * -XX:+UseSerialGC 设置串行收集器
  * -XX:+UseParallelGC 设置并行收集器
  * -XX:+UseConcMarkSweepGC 设置并发收集器
+ 垃圾回收统计信息
  * -XX:+PrintGC 打印GC简要信息
  * -XX:+PrintGCDetails 打印GC详细信息
  * -Xloggc:filename 将GC信息打印到日志文件

6.调优Tomcat并使用JMeter进行测试

典型tomcat优化配置
set JAVA_OPTS=
  -Xms4g
  -Xmx4g
  -Xss512k
  -XX:+AggressiveOpts     //最大程度的优化
  -XX:+UseBiasedLocking   //启用偏置锁
  -XX:PermSize=64M        //JDK8已取消
  -XX:MaxPermSize=300M    //JDK8已取消
  -XX:+DisableExplicitGC  //禁用显式调用GC：System.gc();

  -XX:+UseConcMarkSweepGC            //使用CMS缩短响应时间，并发收集，低停顿
  -XX:+UseParNewGC                   //并行收集新生代的垃圾
  -XX:+CMSParallelRemarkEnabled      //在使用UseParNewGC的情况下，尽量减少mark的时间
  -XX:+UseCMSCompactAtFullCollection //使用并发收集器时，开启对年老代的压缩，使碎片减少
  -XX:LargePageSizeInBytes=128m      //内存分页大小对性能的提升
  -XX:+UseFastAccessorMethods        //get、set方法转成本地代码
  -Djava.awt.headless=true           //修复linux下的tomcat处理图表时可能会产生的一个bug

在Tomcat的bin目录下创建setenv.bat文件，写入如下内容：
set "JAVA_OPTS=-Xms2g -Xmx2g -Xss512k -XX:+AggressiveOpts -XX:+UseBiasedLocking -XX:PermSize=64M -XX:MaxPermSize=300M -XX:+DisableExplicitGC -XX:+UseConcMarkSweepGC -XX:+UseParNewGC -XX:+CMSParallelRemarkEnabled -XX:+UseCMSCompactAtFullCollection -XX:LargePageSizeInBytes=128m -XX:+UseFastAccessorMethods -Djava.awt.headless=true"

性能测试工具：LoadRunner/Selenium/JMeter

使用JMeter测试调优前后Tomcat的服务的吞吐量（Throughput）
- 右键[测试计划]->添加->Threads(Users)->线程组->线程数2000
- 右键[线程组]->添加->Sampler->HTTP请求->输入IP/端口/路径等
- 右键[线程组]->添加->监听器->Aggregate Graph
- 启动运行测试计划，查看Aggregate Graph中Throughput的输出

7.参考：
- Oracle网站：HotSpot Virtual Machine Garbage Collection Tuning Guide Release 8
- Java虚拟机-JVM各种参数配置大全详细
- 基于JVM（内存）和Tomcat性能调优
- Tomcat 7优化前及优化后的性能对比

